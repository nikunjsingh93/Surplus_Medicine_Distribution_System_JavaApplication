/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.PatientRole;

import Business.Enterprise.DisposableEnterprise;
import Business.Enterprise.Enterprise;
import Business.Enterprise.NGOEnterprise;
import Business.Inventory.InventoryItem;
import Business.Inventory.NGOInventoryItem;
import Business.Network.Network;
import Business.UserAccount.UserAccount;
import Business.UserOrder.UserOrder;
import Business.Validation.Validation;
import Business.WorkQueue.PatientDoctorWorkRequest;
import java.awt.CardLayout;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Shah
 */
public class OrderNGOJPanel extends javax.swing.JPanel {

    /**
     * Creates new form OrderNGOJPanel
     */
    private JPanel container;
    private Enterprise enterprise;
    private Network network;
    private UserAccount userAccount;

    public OrderNGOJPanel(JPanel container, Enterprise enterprise, UserAccount userAccount, Network network) {
        initComponents();
        this.container = container;
        this.enterprise = enterprise;
        this.network = network;
        this.userAccount = userAccount;
        PopulateOrderNgo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableNgoList = new javax.swing.JTable();
        ordertext = new javax.swing.JTextField();
        orderBtn = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel1.setText("Order From NGO");

        tableNgoList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Medicine Name", "Quantity", "Expiry Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableNgoList);

        orderBtn.setText("Order Medicine");
        orderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderBtnActionPerformed(evt);
            }
        });

        btnBack.setText("<< Back Button");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel2.setText("Quantity:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnBack))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(395, 395, 395)
                        .addComponent(jLabel2)
                        .addGap(28, 28, 28)
                        .addComponent(ordertext, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(orderBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(216, 216, 216)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 719, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(462, 462, 462)
                        .addComponent(jLabel1)))
                .addContainerGap(228, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(btnBack)
                .addGap(48, 48, 48)
                .addComponent(jLabel1)
                .addGap(58, 58, 58)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ordertext, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(orderBtn)
                    .addComponent(jLabel2))
                .addContainerGap(175, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    public void PopulateOrderNgo() {

        // Nikunj 6/12
        Enterprise enterp = null;
        for (Enterprise ent : network.getEnterpriseDirectory().getEnterpriseList()) {

            if (ent.getEnterpriseType().getValue().equals("NGO Enterprise") && ent instanceof NGOEnterprise) {

                enterp = ent;
                break;
            }
        }

        DefaultTableModel model = (DefaultTableModel) tableNgoList.getModel();

        model.setRowCount(0);

// Nikunj 6/12
        for (InventoryItem inv : enterp.getInventoryDirectoryEnterpriseLevel().getInventoryList()) {

            Object[] row = new Object[3];

            row[0] = inv;
            row[1] = inv.getMedicine().getQuantity();
            SimpleDateFormat formatter = new SimpleDateFormat("MM/dd/yyyy");
            Date e = inv.getMedicine().getExpiryDate();
            String d = formatter.format(e);
            row[2] = d;

            model.addRow(row);

// Nikunj 6/12
        }

    }
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        container.remove(this);
        CardLayout layout = (CardLayout) container.getLayout();
        layout.previous(container);
    }//GEN-LAST:event_btnBackActionPerformed

    private void orderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderBtnActionPerformed
        // TODO add your handling code here:

        //Nikunj Singh
        
        int flag = 0;
        int row = tableNgoList.getSelectedRow();

        if (row < 0) {
            JOptionPane.showMessageDialog(null, "please select a row");
        }

        int q = Integer.parseInt(ordertext.getText());
        if (ordertext.getText().equals("") || ordertext.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Quantity cannot be blank");
            return;
        }
        Validation va = new Validation();
        boolean a = va.regexAgeCheck(ordertext.getText());
        if (!a) {
            JOptionPane.showMessageDialog(null, "Please enter integer value only");
            return;
        } else {

            InventoryItem ngoi = (InventoryItem) tableNgoList.getValueAt(row, 0);

            int i = ngoi.getQuantity();
            int ans = i - q;
            if (ans >= i) {
                JOptionPane.showMessageDialog(null, "Required Quanity cannt be greater than Original Quantity");
                return;
            } else {
                
                // Ankita 12-12
        // Add order to orderDirectory in UserAccount
        //check if name already exists in userorderDirectory
        for(UserOrder o : userAccount.getUserOrderDir().getUserOrderList())
        {
            //if same med already present in list
            if(o.getOrderItem().equalsIgnoreCase(ngoi.getMedName()))
            {
                flag = 1;
                o.setQuantity(o.getQuantity()+q);
                userAccount.getUserOrderDir().addOrder(o);
            }
        }
        if(flag == 0)
        {
        UserOrder order = new UserOrder();
        order.setOrderItem(ngoi.getMedName());
        order.setQuantity(q);
        userAccount.getUserOrderDir().addOrder(order);
        }    
        // Ankita 12-12
                
                
                
                
                
//                ngoi.getMedicine().setQuantity(ans);

                PopulateOrderNgo();

                JOptionPane.showMessageDialog(null, "You have ordered  " + q + "  medicines");
            }
    }//GEN-LAST:event_orderBtnActionPerformed
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton orderBtn;
    private javax.swing.JTextField ordertext;
    private javax.swing.JTable tableNgoList;
    // End of variables declaration//GEN-END:variables
}
